{"version":3,"file":"index.js","sources":["../../src/index.tsx"],"sourcesContent":["import { serverFnFetcher } from '@tanstack/start-server-functions-fetcher'\nimport { mergeHeaders } from '@tanstack/start-client'\nimport { getHeaders } from '@tanstack/start-server'\nimport type { CreateRpcFn } from '@tanstack/server-functions-plugin'\n\nfunction sanitizeBase(base: string) {\n  return base.replace(/^\\/|\\/$/g, '')\n}\n\nexport const createSsrRpc: CreateRpcFn = (functionId, serverBase) => {\n  const url = `/${sanitizeBase(serverBase)}/${functionId}`\n\n  const ssrFn = (...args: Array<any>) => {\n    return serverFnFetcher(url, args, async (url, requestInit) => {\n      // NOTE: Not sure if Nitro should handle this or if Vinxi was handling\n      // it for us, but not all headers were being sent with the request\n      // from here to the server handler, so we set them manually here.\n      requestInit.headers = mergeHeaders(getHeaders(), requestInit.headers)\n      // @ts-expect-error The $fetch.native method is not typed yet\n      return $fetch.native(url, requestInit)\n    })\n  }\n\n  return Object.assign(ssrFn, {\n    url,\n    functionId,\n  })\n}\n"],"names":["url"],"mappings":";;;AAKA,SAAS,aAAa,MAAc;AAC3B,SAAA,KAAK,QAAQ,YAAY,EAAE;AACpC;AAEa,MAAA,eAA4B,CAAC,YAAY,eAAe;AACnE,QAAM,MAAM,IAAI,aAAa,UAAU,CAAC,IAAI,UAAU;AAEhD,QAAA,QAAQ,IAAI,SAAqB;AACrC,WAAO,gBAAgB,KAAK,MAAM,OAAOA,MAAK,gBAAgB;AAI5D,kBAAY,UAAU,aAAa,WAAW,GAAG,YAAY,OAAO;AAE7D,aAAA,OAAO,OAAOA,MAAK,WAAW;AAAA,IAAA,CACtC;AAAA,EACH;AAEO,SAAA,OAAO,OAAO,OAAO;AAAA,IAC1B;AAAA,IACA;AAAA,EAAA,CACD;AACH;"}