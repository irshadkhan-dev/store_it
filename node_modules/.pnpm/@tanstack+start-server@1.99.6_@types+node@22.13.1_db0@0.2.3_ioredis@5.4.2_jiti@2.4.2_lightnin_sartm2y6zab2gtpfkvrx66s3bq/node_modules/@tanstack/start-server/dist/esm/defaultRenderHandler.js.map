{"version":3,"file":"defaultRenderHandler.js","sources":["../../src/defaultRenderHandler.tsx"],"sourcesContent":["import ReactDOMServer from 'react-dom/server'\nimport { StartServer } from './StartServer'\nimport type { HandlerCallback } from './defaultStreamHandler'\nimport type { AnyRouter } from '@tanstack/react-router'\n\nexport const defaultRenderHandler: HandlerCallback<AnyRouter> = async ({\n  router,\n  responseHeaders,\n}) => {\n  try {\n    let html = ReactDOMServer.renderToString(<StartServer router={router} />)\n    const injectedHtml = await Promise.all(router.serverSsr!.injectedHtml).then(\n      (htmls) => htmls.join(''),\n    )\n    html = html.replace(`</body>`, `${injectedHtml}</body>`)\n    return new Response(`<!DOCTYPE html>${html}`, {\n      status: router.state.statusCode,\n      headers: responseHeaders,\n    })\n  } catch (error) {\n    console.error('Render to string error:', error)\n    return new Response('Internal Server Error', {\n      status: 500,\n      headers: responseHeaders,\n    })\n  }\n}\n"],"names":[],"mappings":";;;AAKO,MAAM,uBAAmD,OAAO;AAAA,EACrE;AAAA,EACA;AACF,MAAM;AACA,MAAA;AACF,QAAI,OAAO,eAAe,eAAgB,oBAAA,aAAA,EAAY,QAAgB,CAAE;AACxE,UAAM,eAAe,MAAM,QAAQ,IAAI,OAAO,UAAW,YAAY,EAAE;AAAA,MACrE,CAAC,UAAU,MAAM,KAAK,EAAE;AAAA,IAC1B;AACA,WAAO,KAAK,QAAQ,WAAW,GAAG,YAAY,SAAS;AACvD,WAAO,IAAI,SAAS,kBAAkB,IAAI,IAAI;AAAA,MAC5C,QAAQ,OAAO,MAAM;AAAA,MACrB,SAAS;AAAA,IAAA,CACV;AAAA,WACM,OAAO;AACN,YAAA,MAAM,2BAA2B,KAAK;AACvC,WAAA,IAAI,SAAS,yBAAyB;AAAA,MAC3C,QAAQ;AAAA,MACR,SAAS;AAAA,IAAA,CACV;AAAA,EAAA;AAEL;"}