import { jsx } from "react/jsx-runtime";
import { Fragment } from "react";
import { hashKey, dehydrate, hydrate, QueryClientProvider } from "@tanstack/react-query";
function routerWithQueryClient(router, queryClient) {
  const seenQueryKeys = /* @__PURE__ */ new Set();
  const streamedQueryKeys = /* @__PURE__ */ new Set();
  const ogClientOptions = queryClient.getDefaultOptions();
  queryClient.setDefaultOptions({
    ...ogClientOptions,
    queries: {
      ...ogClientOptions.queries,
      _experimental_beforeQuery: (options) => {
        var _a, _b;
        (_b = (_a = ogClientOptions.queries) == null ? void 0 : _a._experimental_beforeQuery) == null ? void 0 : _b.call(_a, options);
        const hash = options.queryKeyHashFn || hashKey;
        if (router.isServer) {
          if (seenQueryKeys.has(hash(options.queryKey))) {
            return;
          }
          seenQueryKeys.add(hash(options.queryKey));
          if (queryClient.getQueryData(options.queryKey) !== void 0) {
            options.__skipInjection = true;
            return;
          }
        } else {
          const dehydratedClient = router.clientSsr.getStreamedValue(
            "__QueryClient__" + hash(options.queryKey)
          );
          if (dehydratedClient && !dehydratedClient.hydrated) {
            dehydratedClient.hydrated = true;
            hydrate(queryClient, dehydratedClient);
          }
        }
      },
      _experimental_afterQuery: (options, _result) => {
        var _a, _b;
        const hash = options.queryKeyHashFn || hashKey;
        if (router.isServer && !options.__skipInjection && queryClient.getQueryData(options.queryKey) !== void 0 && !streamedQueryKeys.has(hash(options.queryKey))) {
          streamedQueryKeys.add(hash(options.queryKey));
          router.serverSsr.streamValue(
            "__QueryClient__" + hash(options.queryKey),
            dehydrate(queryClient, {
              shouldDehydrateMutation: () => false,
              shouldDehydrateQuery: (query) => hash(query.queryKey) === hash(options.queryKey)
            })
          );
        }
        (_b = (_a = ogClientOptions.queries) == null ? void 0 : _a._experimental_afterQuery) == null ? void 0 : _b.call(
          _a,
          options,
          _result
        );
      }
    }
  });
  const ogOptions = router.options;
  router.options = {
    ...router.options,
    dehydrate: () => {
      var _a;
      return {
        ...(_a = ogOptions.dehydrate) == null ? void 0 : _a.call(ogOptions),
        // When critical data is dehydrated, we also dehydrate the query client
        dehydratedQueryClient: dehydrate(queryClient)
      };
    },
    hydrate: (dehydrated) => {
      var _a;
      (_a = ogOptions.hydrate) == null ? void 0 : _a.call(ogOptions, dehydrated);
      hydrate(queryClient, dehydrated.dehydratedQueryClient);
    },
    context: {
      ...ogOptions.context,
      // Pass the query client to the context, so we can access it in loaders
      queryClient
    },
    // Wrap the app in a QueryClientProvider
    Wrap: ({ children }) => {
      const OGWrap = ogOptions.Wrap || Fragment;
      return /* @__PURE__ */ jsx(QueryClientProvider, { client: queryClient, children: /* @__PURE__ */ jsx(OGWrap, { children }) });
    }
  };
  return router;
}
export {
  routerWithQueryClient
};
//# sourceMappingURL=index.js.map
