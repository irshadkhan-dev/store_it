{"version":3,"file":"index.cjs","sources":["../../src/index.tsx"],"sourcesContent":["import { isNotFound, isPlainObject, isRedirect } from '@tanstack/react-router'\nimport invariant from 'tiny-invariant'\nimport {\n  eventHandler,\n  getEvent,\n  getHeaders,\n  getResponseStatus,\n  toWebRequest,\n} from '@tanstack/start-server'\nimport { startSerializer } from '@tanstack/start-client'\n// @ts-expect-error\nimport _serverFnManifest from 'tsr:server-fn-manifest'\nimport type { H3Event } from '@tanstack/start-server'\n\n// NOTE: This is a dummy export to silence warnings about\n// only having a default export.\nexport const dummy = 1\n\nexport default eventHandler(handleServerAction)\n\nconst serverFnManifest = _serverFnManifest as Record<\n  string,\n  {\n    functionName: string\n    extractedFilename: string\n    importer: () => Promise<any>\n  }\n>\n\nasync function handleServerAction(event: H3Event) {\n  const request = toWebRequest(event)!\n  const response = (await handleServerRequest(request, event)) as Response\n\n  // NOTE: I'm not sure if nitro should be handling this or if Vinxi was\n  // handling it for us, but not all headers were being returned with the\n  // response from the h3 utils. So we merge the headers from h3 and\n  // the headers from the response and set them on the response.\n  Object.entries(getHeaders()).forEach(([key, value]) => {\n    if (\n      key &&\n      value &&\n      (!response.headers.has(key) || !response.headers.get(key)) &&\n      // For some reason, content-length is being set by h3, but doesn't\n      // match the actual content length of the response.\n      key.toLowerCase() !== 'content-length'\n    ) {\n      response.headers.set(key, value)\n    }\n  })\n\n  return response\n}\n\nfunction sanitizeBase(base: string | undefined) {\n  if (!base) {\n    throw new Error(\n      'ðŸš¨ process.env.TSS_SERVER_FN_BASE is required in start/server-handler/index',\n    )\n  }\n\n  return base.replace(/^\\/|\\/$/g, '')\n}\n\nasync function handleServerRequest(request: Request, _event?: H3Event) {\n  const method = request.method\n  const url = new URL(request.url, 'http://localhost:3000')\n  // extract the serverFnId from the url as host/_server/:serverFnId\n  // Define a regex to match the path and extract the :thing part\n  const regex = new RegExp(\n    `${sanitizeBase(process.env.TSS_SERVER_FN_BASE)}/([^/?#]+)`,\n  )\n\n  // Execute the regex\n  const match = url.pathname.match(regex)\n  const serverFnId = match ? match[1] : null\n  const search = Object.fromEntries(url.searchParams.entries()) as {\n    payload?: any\n  }\n\n  if (typeof serverFnId !== 'string') {\n    throw new Error('Invalid server action param for serverFnId: ' + serverFnId)\n  }\n\n  const serverFnInfo = serverFnManifest[serverFnId]\n\n  if (!serverFnInfo) {\n    console.log('serverFnManifest', serverFnManifest)\n    throw new Error('Server function info not found for ' + serverFnId)\n  }\n\n  if (process.env.NODE_ENV === 'development')\n    console.info(`\\nServerFn Request: ${serverFnId}`)\n\n  let fnModule: undefined | { [key: string]: any }\n\n  if (process.env.NODE_ENV === 'development') {\n    fnModule = await (globalThis as any).app\n      .getRouter('server')\n      .internals.devServer.ssrLoadModule(serverFnInfo.extractedFilename)\n  } else {\n    fnModule = await serverFnInfo.importer()\n  }\n\n  // let moduleUrl = serverFnInfo.extractedFilename\n  // // In dev, we (for now) use Vinxi to get the \"server\" server-side router\n  // // Then we use that router's devServer.ssrLoadModule to get the serverFn\n  // if (process.env.NODE_ENV === 'development') {\n  //   fnModule = await (globalThis as any).app\n  //     .getRouter('server')\n  //     .internals.devServer.ssrLoadModule(serverFnInfo.extractedFilename)\n  // } else {\n  //   // In prod, we use the serverFn's chunkName to get the serverFn\n  //   const router = (globalThis as any).app.getRouter('server')\n  //   const filePath = join(\n  //     router.outDir,\n  //     router.base,\n  //     serverFnInfo.chunkName + '.mjs',\n  //   )\n  //   moduleUrl = pathToFileURL(filePath).toString()\n  //   fnModule = await import(/* @vite-ignore */ moduleUrl)\n  // }\n\n  if (!fnModule) {\n    console.log('serverFnManifest', serverFnManifest)\n    throw new Error('Server function module not resolved for ' + serverFnId)\n  }\n\n  const action = fnModule[serverFnInfo.functionName]\n\n  if (!action) {\n    console.log('serverFnManifest', serverFnManifest)\n    console.log('fnModule', fnModule)\n    throw new Error(\n      `Server function module export not resolved for serverFn ID: ${serverFnId}`,\n    )\n  }\n\n  // Known FormData 'Content-Type' header values\n  const formDataContentTypes = [\n    'multipart/form-data',\n    'application/x-www-form-urlencoded',\n  ]\n\n  const response = await (async () => {\n    try {\n      const arg = await (async () => {\n        // FormData\n        if (\n          request.headers.get('Content-Type') &&\n          formDataContentTypes.some((type) =>\n            request.headers.get('Content-Type')?.includes(type),\n          )\n        ) {\n          // We don't support GET requests with FormData payloads... that seems impossible\n          invariant(\n            method.toLowerCase() !== 'get',\n            'GET requests with FormData payloads are not supported',\n          )\n\n          return await request.formData()\n        }\n\n        // Get requests use the query string\n        if (method.toLowerCase() === 'get') {\n          // First we need to get the ?payload query string\n          if (!search.payload) {\n            return undefined\n          }\n\n          // If there's a payload, we need to parse it\n          return startSerializer.parse(search.payload)\n        }\n\n        // For non-form, non-get\n        const jsonPayloadAsString = await request.text()\n        return startSerializer.parse(jsonPayloadAsString)\n      })()\n\n      const result = await action(arg)\n\n      if (result instanceof Response) {\n        return result\n      } else if (\n        isPlainObject(result) &&\n        'result' in result &&\n        result.result instanceof Response\n      ) {\n        return result.result\n      }\n\n      // TODO: RSCs\n      // if (isValidElement(result)) {\n      //   const { renderToPipeableStream } = await import(\n      //     // @ts-expect-error\n      //     '@vinxi/react-server-dom/server'\n      //   )\n\n      //   const pipeableStream = renderToPipeableStream(result)\n\n      //   setHeaders(event, {\n      //     'Content-Type': 'text/x-component',\n      //   } as any)\n\n      //   sendStream(event, response)\n      //   event._handled = true\n\n      //   return new Response(null, { status: 200 })\n      // }\n\n      if (isRedirect(result) || isNotFound(result)) {\n        return redirectOrNotFoundResponse(result)\n      }\n\n      return new Response(\n        result !== undefined ? startSerializer.stringify(result) : undefined,\n        {\n          status: getResponseStatus(getEvent()),\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        },\n      )\n    } catch (error: any) {\n      if (error instanceof Response) {\n        return error\n      } else if (\n        isPlainObject(error) &&\n        'result' in error &&\n        error.result instanceof Response\n      ) {\n        return error.result\n      }\n\n      // Currently this server-side context has no idea how to\n      // build final URLs, so we need to defer that to the client.\n      // The client will check for __redirect and __notFound keys,\n      // and if they exist, it will handle them appropriately.\n\n      if (isRedirect(error) || isNotFound(error)) {\n        return redirectOrNotFoundResponse(error)\n      }\n\n      console.error('Server Fn Error!')\n      console.error(error)\n      console.info()\n\n      return new Response(startSerializer.stringify(error), {\n        status: 500,\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      })\n    }\n  })()\n\n  if (process.env.NODE_ENV === 'development')\n    console.info(`ServerFn Response: ${response.status}`)\n\n  if (response.headers.get('Content-Type') === 'application/json') {\n    const cloned = response.clone()\n    const text = await cloned.text()\n    const payload = text ? JSON.stringify(JSON.parse(text)) : 'undefined'\n\n    if (process.env.NODE_ENV === 'development')\n      console.info(\n        ` - Payload: ${payload.length > 100 ? payload.substring(0, 100) + '...' : payload}`,\n      )\n  }\n  if (process.env.NODE_ENV === 'development') console.info()\n\n  return response\n}\n\nfunction redirectOrNotFoundResponse(error: any) {\n  const { headers, ...rest } = error\n\n  return new Response(JSON.stringify(rest), {\n    status: 200,\n    headers: {\n      'Content-Type': 'application/json',\n      ...(headers || {}),\n    },\n  })\n}\n"],"names":["eventHandler","toWebRequest","getHeaders","startSerializer","isPlainObject","isRedirect","isNotFound","getResponseStatus","getEvent"],"mappings":"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"}